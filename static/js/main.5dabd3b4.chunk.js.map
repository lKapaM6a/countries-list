{"version":3,"sources":["cache.js","typeDefs.js","components/List/List.js","App.js","index.js","components/List/List.module.scss"],"names":["cache","InMemoryCache","typeDefs","gql","_templateObject","Object","taggedTemplateLiteral","GET_CONTINENTS","List_templateObject","DelayedList","props","_data$continents","_useLazyQuery","useLazyQuery","_useLazyQuery2","slicedToArray","getContinent","_useLazyQuery2$","data","loadingContinents","_useState","useState","_useState2","activeContinent","setActiveContinent","_useState3","_useState4","activeCountry","setActiveCountry","toggleContinent","useCallback","code","prev","toggleCountry","useEffect","react_default","a","createElement","Fragment","className","styles","wrapper","title","localization","listWrapper","continents","map","continent","listItem","key","onClick","concat","listName","length","toggle","opened","name","countries","country","languages","language","loaderBg","loaderWrapper","loaderIcon","viewBox","loaderPath","cx","cy","r","fill","strokeWidth","strokeMiterlimit","App","List_DelayedList","client","ApolloClient","uri","resolvers","ReactDOM","render","ApolloProvider","document","getElementById","module","exports","rotate","dash","color"],"mappings":"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","file":"static/js/main.5dabd3b4.chunk.js","sourcesContent":["import { InMemoryCache } from \"@apollo/client\";\n\nexport const cache = new InMemoryCache({});\n","import {gql} from \"@apollo/client\";\n\nexport const typeDefs = gql`\n  type Continent {\n    code: String\n    name: String\n    countries: [Country]\n  }\n  type Country {\n    code: String\n    name: String\n    native: String\n    phone: String\n    continent: Continent\n    currency: String\n    languages: [Language]\n    emoji: String\n    emojiU: String\n    states: [State]\n  }\n  type State {\n    code: String\n    name: String\n    country: Country\n  }\n  type Language {\n    code: String\n    name: String\n    native: String\n    rtl: Int\n  }\n  type Query {\n    continents: [Continent]\n    continent(code: String): Continent\n    countries: [Country]\n    country(code: String): Country\n    languages: [Language]\n    language(code: String): Language\n  }\n`;\n","import React, {FC, useState, useEffect, useCallback} from 'react'\nimport {useLazyQuery} from '@apollo/client'\nimport gql from 'graphql-tag'\nimport styles from './List.module.scss'\n\ninterface Props {\n    localization?: ListLocalization\n}\n\nconst GET_CONTINENTS = gql`\n  {\n     continents {\n        code\n        name\n        countries {\n          code\n          name\n          languages {\n            code\n            name\n          }\n        }\n    }\n  }\n`;\n\nexport const DelayedList: FC<Props> = props => {\n    const [getContinent, {loadingContinents, data}] = useLazyQuery(GET_CONTINENTS)\n    const [activeContinent, setActiveContinent] = useState()\n    const [activeCountry, setActiveCountry] = useState()\n\n    const toggleContinent = useCallback(code => {\n        setActiveContinent(prev => {\n            if (prev === code) {\n                return null\n            }\n            return code\n        })\n\n        // remove opened Country if closed Continent\n        setActiveCountry(prev => {\n            return null\n        })\n    }, []);\n\n    const toggleCountry = useCallback(code => {\n        setActiveCountry(prev => {\n            if (prev === code) {\n                return null\n            }\n            return code\n        })\n    }, []);\n\n    useEffect(() => {\n        getContinent()\n    }, []);\n\n    return (\n        <>\n            {!data ? (\n                    <>\n                        <div className={styles.loaderBg}>\n                            <div className={styles.loaderWrapper}>\n                                <svg className={styles.loaderIcon} viewBox=\"25 25 50 50\">\n                                    <circle className={styles.loaderPath} cx=\"50\" cy=\"50\" r=\"20\" fill=\"none\" strokeWidth=\"2\"\n                                            strokeMiterlimit=\"10\"/>\n                                </svg>\n                            </div>\n                        </div>\n                    </>\n                ) :\n                (\n                    <>\n                        <div className={styles.wrapper}>\n                            <h1 className={styles.title}>{localization.title}</h1>\n\n                            <div className={styles.listWrapper}>\n                                {data?.continents?.map(continent => (\n                                    <div className={styles.listItem} key={continent.code}>\n                                        <span\n                                            onClick={() => toggleContinent(continent.code)}\n                                            className={`${styles.listName} \n                                            ${continent.code.length > 0 ? `${styles.toggle}` : ''}\n                                            ${continent.code === activeContinent ? `${styles.opened}` : ''}`}\n                                            title={continent.name}>\n                                            {continent.name}\n                                        </span>\n\n                                        {continent.code === activeContinent && continent.countries.map(country => (\n                                            <div key={country.code} className={styles.listItem}>\n                                                <span\n                                                    onClick={() => toggleCountry(country.code)}\n                                                    className={`${styles.listName}\n                                                    ${country.languages.length > 0 ? `${styles.toggle}` : ''}\n                                                    ${country.code === activeCountry ? `${styles.opened}` : ''}`}\n                                                    title={country.name}>\n                                                    {country.name}\n                                                </span>\n\n                                                {country.code === activeCountry && country.languages.map(language => (\n                                                    <div key={language.code} className={styles.listItem}>\n                                                        <span className={styles.listName} title={language.name}>\n                                                            {language.name}\n                                                        </span>\n                                                    </div>\n                                                ))}\n                                            </div>\n                                        ))}\n                                    </div>\n                                ))}\n                            </div>\n                        </div>\n                    </>\n                )}\n        </>\n    );\n}\n\nconst localization = {\n    title: 'Continent / Countries / Language list'\n}\n\nexport interface ListLocalization {\n    title: string\n}\n","import React from 'react'\nimport {DelayedList} from './components/List/List'\n\nexport default function App() {\n    return (\n        <>\n            <DelayedList/>\n        </>\n    );\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { ApolloClient, ApolloProvider } from '@apollo/client'\nimport { cache } from './cache'\nimport { typeDefs } from './typeDefs'\n\nimport App from './App'\n\nconst client = new ApolloClient({\n    cache,\n    uri: \"https://countries.trevorblades.com\",\n    typeDefs,\n    resolvers: {}\n});\n\nReactDOM.render(\n    <ApolloProvider client={client}>\n        <App />\n    </ApolloProvider>,\n    document.getElementById(\"root\")\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"List_wrapper__2RVU_\",\"title\":\"List_title__rqZIM\",\"listWrapper\":\"List_listWrapper__1jhOE\",\"listItem\":\"List_listItem__2uUHn\",\"listName\":\"List_listName__3yl36\",\"toggle\":\"List_toggle__3gvm0\",\"opened\":\"List_opened__3RFID\",\"loaderBg\":\"List_loaderBg__1NEp_\",\"loaderWrapper\":\"List_loaderWrapper__1LcIy\",\"loaderIcon\":\"List_loaderIcon__1xFDo\",\"rotate\":\"List_rotate__mbSa3\",\"loaderPath\":\"List_loaderPath__29YNx\",\"dash\":\"List_dash__3mNMt\",\"color\":\"List_color__eQ3gb\"};"],"sourceRoot":""}